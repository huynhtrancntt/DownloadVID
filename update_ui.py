import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import requests
import zipfile
import shutil
import os
import sys
from datetime import datetime

VERSION_FILE = "version.bin"
UPDATE_INFO_URL = "https://raw.githubusercontent.com/huynhtrancntt/DownloadVID/main/update_info.json"

class UpdaterGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("DownloadVID - Tr√¨nh C·∫≠p Nh·∫≠t")
        self.root.geometry("600x500")
        self.root.resizable(False, False)
        
        # Thi·∫øt l·∫≠p style
        self.setup_style()
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        
        # T·ª± ƒë·ªông ki·ªÉm tra version khi kh·ªüi ƒë·ªông
        self.check_version_on_startup()
    
    def setup_style(self):
        """Thi·∫øt l·∫≠p style cho giao di·ªán"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # C·∫•u h√¨nh m√†u s·∫Øc
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'), foreground='#2c3e50')
        style.configure('Info.TLabel', font=('Arial', 10), foreground='#34495e')
        style.configure('Success.TLabel', font=('Arial', 10), foreground='#27ae60')
        style.configure('Error.TLabel', font=('Arial', 10), foreground='#e74c3c')
        style.configure('Update.TButton', font=('Arial', 11, 'bold'))
    
    def create_widgets(self):
        """T·∫°o c√°c widget cho giao di·ªán"""
        # Frame ch√≠nh
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Ti√™u ƒë·ªÅ
        title_label = ttk.Label(main_frame, text="üîÑ TR√åNH C·∫¨P NH·∫¨T DOWNLOADVID", style='Title.TLabel')
        title_label.pack(pady=(0, 20))
        
        # Frame th√¥ng tin version
        version_frame = ttk.LabelFrame(main_frame, text="Th√¥ng Tin Phi√™n B·∫£n", padding="15")
        version_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Version hi·ªán t·∫°i
        current_frame = ttk.Frame(version_frame)
        current_frame.pack(fill=tk.X, pady=(0, 5))
        ttk.Label(current_frame, text="Phi√™n b·∫£n hi·ªán t·∫°i:", style='Info.TLabel').pack(side=tk.LEFT)
        self.current_version_label = ttk.Label(current_frame, text="ƒêang ki·ªÉm tra...", style='Info.TLabel')
        self.current_version_label.pack(side=tk.RIGHT)
        
        # Version m·ªõi nh·∫•t
        latest_frame = ttk.Frame(version_frame)
        latest_frame.pack(fill=tk.X, pady=(0, 5))
        ttk.Label(latest_frame, text="Phi√™n b·∫£n m·ªõi nh·∫•t:", style='Info.TLabel').pack(side=tk.LEFT)
        self.latest_version_label = ttk.Label(latest_frame, text="ƒêang ki·ªÉm tra...", style='Info.TLabel')
        self.latest_version_label.pack(side=tk.RIGHT)
        
        # Tr·∫°ng th√°i
        status_frame = ttk.Frame(version_frame)
        status_frame.pack(fill=tk.X)
        ttk.Label(status_frame, text="Tr·∫°ng th√°i:", style='Info.TLabel').pack(side=tk.LEFT)
        self.status_label = ttk.Label(status_frame, text="ƒêang ki·ªÉm tra...", style='Info.TLabel')
        self.status_label.pack(side=tk.RIGHT)
        
        # Frame n√∫t b·∫•m
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.check_button = ttk.Button(button_frame, text="üîç Ki·ªÉm Tra C·∫≠p Nh·∫≠t", 
                                      command=self.check_for_update_thread)
        self.check_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.update_button = ttk.Button(button_frame, text="‚¨áÔ∏è C·∫≠p Nh·∫≠t Ngay", 
                                       command=self.start_update_thread, style='Update.TButton',
                                       state=tk.DISABLED)
        self.update_button.pack(side=tk.LEFT)
        
        # Progress bar
        self.progress_frame = ttk.Frame(main_frame)
        self.progress_frame.pack(fill=tk.X, pady=(0, 15))
        
        ttk.Label(self.progress_frame, text="Ti·∫øn tr√¨nh:", style='Info.TLabel').pack(anchor=tk.W)
        self.progress_bar = ttk.Progressbar(self.progress_frame, mode='determinate')
        self.progress_bar.pack(fill=tk.X, pady=(5, 0))
        
        # Log area
        log_frame = ttk.LabelFrame(main_frame, text="Nh·∫≠t K√Ω Ho·∫°t ƒê·ªông", padding="10")
        log_frame.pack(fill=tk.BOTH, expand=True)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=12, wrap=tk.WORD,
                                                 font=('Consolas', 9))
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # Th√™m log kh·ªüi t·∫°o
        self.log(f"üöÄ Tr√¨nh c·∫≠p nh·∫≠t kh·ªüi ƒë·ªông - {datetime.now().strftime('%H:%M:%S')}")
    
    def log(self, message):
        """Th√™m message v√†o log"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def get_current_version(self):
        """ƒê·ªçc phi√™n b·∫£n hi·ªán t·∫°i t·ª´ file version.bin"""
        try:
            if os.path.exists(VERSION_FILE):
                with open(VERSION_FILE, 'r', encoding='utf-8') as f:
                    version = f.read().strip()
                    return version if version else "1.0.0"
            else:
                self.save_current_version("1.0.0")
                return "1.0.0"
        except Exception as e:
            self.log(f"‚ùå L·ªói khi ƒë·ªçc version: {e}")
            return "1.0.0"
    
    def save_current_version(self, version):
        """L∆∞u phi√™n b·∫£n hi·ªán t·∫°i v√†o file version.bin"""
        try:
            with open(VERSION_FILE, 'w', encoding='utf-8') as f:
                f.write(version)
        except Exception as e:
            self.log(f"‚ùå L·ªói khi l∆∞u version: {e}")
    
    def check_version_on_startup(self):
        """Ki·ªÉm tra version khi kh·ªüi ƒë·ªông"""
        current_version = self.get_current_version()
        self.current_version_label.config(text=current_version)
        self.log(f"üì± Phi√™n b·∫£n hi·ªán t·∫°i: {current_version}")
        
        # T·ª± ƒë·ªông ki·ªÉm tra update
        threading.Thread(target=self.check_for_update, daemon=True).start()
    
    def check_for_update_thread(self):
        """Ch·∫°y ki·ªÉm tra update trong thread ri√™ng"""
        threading.Thread(target=self.check_for_update, daemon=True).start()
    
    def check_for_update(self):
        """Ki·ªÉm tra c√≥ phi√™n b·∫£n m·ªõi kh√¥ng"""
        self.log("üîç ƒêang ki·ªÉm tra phi√™n b·∫£n m·ªõi...")
        self.check_button.config(state=tk.DISABLED)
        
        try:
            current_version = self.get_current_version()
            response = requests.get(UPDATE_INFO_URL, timeout=10)
            data = response.json()
            
            latest_version = data.get("latest_version")
            self.download_url = data.get("download_url")
            
            self.latest_version_label.config(text=latest_version)
            
            if latest_version > current_version:
                self.log(f"üîî C√≥ phi√™n b·∫£n m·ªõi: {latest_version}")
                self.status_label.config(text="C√≥ c·∫≠p nh·∫≠t m·ªõi!", style='Success.TLabel')
                self.update_button.config(state=tk.NORMAL)
                self.latest_version = latest_version
                
                # Hi·ªÉn th·ªã th√¥ng b√°o
                messagebox.showinfo("C·∫≠p Nh·∫≠t C√≥ S·∫µn", 
                                  f"C√≥ phi√™n b·∫£n m·ªõi: {latest_version}\n"
                                  f"Phi√™n b·∫£n hi·ªán t·∫°i: {current_version}\n\n"
                                  f"Nh·∫•n 'C·∫≠p Nh·∫≠t Ngay' ƒë·ªÉ c√†i ƒë·∫∑t.")
            else:
                self.log("‚úÖ B·∫°n ƒëang d√πng phi√™n b·∫£n m·ªõi nh·∫•t")
                self.status_label.config(text="ƒê√£ c·∫≠p nh·∫≠t", style='Success.TLabel')
                self.update_button.config(state=tk.DISABLED)
                
        except Exception as e:
            self.log(f"‚ùå L·ªói khi ki·ªÉm tra phi√™n b·∫£n: {e}")
            self.status_label.config(text="L·ªói ki·ªÉm tra", style='Error.TLabel')
            self.latest_version_label.config(text="Kh√¥ng x√°c ƒë·ªãnh")
        
        finally:
            self.check_button.config(state=tk.NORMAL)
    
    def start_update_thread(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh c·∫≠p nh·∫≠t trong thread ri√™ng"""
        threading.Thread(target=self.perform_update, daemon=True).start()
    
    def perform_update(self):
        """Th·ª±c hi·ªán c·∫≠p nh·∫≠t"""
        try:
            self.update_button.config(state=tk.DISABLED)
            self.check_button.config(state=tk.DISABLED)
            
            output_file = f"update_v{self.latest_version}.zip"
            
            # T·∫£i file
            self.log(f"‚¨áÔ∏è ƒêang t·∫£i {output_file}...")
            self.download_with_progress(self.download_url, output_file)
            
            # Gi·∫£i n√©n v√† c√†i ƒë·∫∑t
            self.extract_and_install(output_file, self.latest_version)
            
        except Exception as e:
            self.log(f"‚ùå L·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t: {e}")
            messagebox.showerror("L·ªói C·∫≠p Nh·∫≠t", f"C√≥ l·ªói x·∫£y ra: {e}")
        
        finally:
            self.update_button.config(state=tk.NORMAL)
            self.check_button.config(state=tk.NORMAL)
    
    def download_with_progress(self, url, output_file):
        """T·∫£i file v·ªõi thanh ti·∫øn tr√¨nh"""
        response = requests.get(url, stream=True)
        total_size = int(response.headers.get('content-length', 0))
        total_mb = total_size / (1024 * 1024)
        
        downloaded = 0
        chunk_size = 1024 * 1024  # 1MB
        
        self.progress_bar.config(maximum=100)
        
        with open(output_file, 'wb') as f:
            for chunk in response.iter_content(chunk_size=chunk_size):
                if chunk:
                    f.write(chunk)
                    downloaded += len(chunk)
                    downloaded_mb = downloaded / (1024 * 1024)
                    percent = int((downloaded_mb / total_mb) * 100) if total_mb > 0 else 0
                    
                    self.progress_bar.config(value=percent)
                    self.log_text.delete("end-2l", "end-1l")  # X√≥a d√≤ng cu·ªëi
                    self.log(f"‚¨áÔ∏è T·∫£i xu·ªëng: {downloaded_mb:.1f}/{total_mb:.1f} MB ({percent}%)")
        
        self.log("‚úÖ T·∫£i ho√†n t·∫•t!")
    
    def extract_and_install(self, zip_file, new_version, extract_to="temp_update"):
        """Gi·∫£i n√©n v√† c√†i ƒë·∫∑t c·∫≠p nh·∫≠t"""
        try:
            self.log(f"üì¶ ƒêang gi·∫£i n√©n {zip_file}...")
            self.progress_bar.config(value=0, maximum=0, mode='indeterminate')
            self.progress_bar.start()
            
            # T·∫°o th∆∞ m·ª•c t·∫°m
            if os.path.exists(extract_to):
                shutil.rmtree(extract_to)
            os.makedirs(extract_to)
            
            # Gi·∫£i n√©n
            with zipfile.ZipFile(zip_file, 'r') as zip_ref:
                zip_ref.extractall(extract_to)
            
            self.log("‚úÖ Gi·∫£i n√©n ho√†n t·∫•t")
            
            # Copy files
            self.log("üìã ƒêang c·∫≠p nh·∫≠t file...")
            current_dir = os.getcwd()
            
            for root, dirs, files in os.walk(extract_to):
                for file in files:
                    src_file = os.path.join(root, file)
                    rel_path = os.path.relpath(src_file, extract_to)
                    dst_file = os.path.join(current_dir, rel_path)
                    
                    dst_dir = os.path.dirname(dst_file)
                    if dst_dir and not os.path.exists(dst_dir):
                        os.makedirs(dst_dir)
                    
                    shutil.copy2(src_file, dst_file)
                    self.log(f"   ‚Üí {rel_path}")
            
            # C·∫≠p nh·∫≠t version
            self.save_current_version(new_version)
            self.current_version_label.config(text=new_version)
            
            # D·ªçn d·∫πp
            self.log("üßπ ƒêang d·ªçn d·∫πp...")
            os.remove(zip_file)
            shutil.rmtree(extract_to)
            
            self.progress_bar.stop()
            self.progress_bar.config(value=100, mode='determinate')
            
            self.log(f"‚úÖ C·∫≠p nh·∫≠t ho√†n t·∫•t! Phi√™n b·∫£n m·ªõi: {new_version}")
            self.status_label.config(text="ƒê√£ c·∫≠p nh·∫≠t", style='Success.TLabel')
            self.update_button.config(state=tk.DISABLED)
            
            # Th√¥ng b√°o th√†nh c√¥ng
            result = messagebox.showinfo("C·∫≠p Nh·∫≠t Th√†nh C√¥ng", 
                                       f"C·∫≠p nh·∫≠t th√†nh c√¥ng l√™n phi√™n b·∫£n {new_version}!\n"
                                       f"Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi.\n\n"
                                       f"B·∫°n c√≥ mu·ªën ƒë√≥ng tr√¨nh c·∫≠p nh·∫≠t kh√¥ng?")
            
        except Exception as e:
            self.progress_bar.stop()
            self.log(f"‚ùå L·ªói khi c√†i ƒë·∫∑t: {e}")
            # D·ªçn d·∫πp khi l·ªói
            if os.path.exists(zip_file):
                os.remove(zip_file)
            if os.path.exists(extract_to):
                shutil.rmtree(extract_to)
            raise

def main():
    root = tk.Tk()
    app = UpdaterGUI(root)
    
    # CƒÉn gi·ªØa c·ª≠a s·ªï
    root.update_idletasks()
    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
    root.geometry(f"+{x}+{y}")
    
    root.mainloop()

if __name__ == "__main__":
    main() 